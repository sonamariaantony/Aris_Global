//Comparable and comparator using pen class and sorting using different fields.
/*class PriceComparator implements Comparator<Pen>
{

	@Override
	public int compare(Pen o1, Pen o2)
	{
		// TODO Auto-generated method stub
		if(o1.getPrice()==o2.getPrice())
		return 0;
		else if(o1.getPrice()>=o2.getPrice())
			return 1;
		else return -1;
	}
	 
}
class BrandComparator implements Comparator<Pen>
{
	@Override
	public int compare(Pen o1, Pen o2)
	{
		// TODO Auto-generated method stub
		
		return o1.getBrand().compareTo(o2.getBrand());
	}
	 
}
class Pen implements Comparable<Pen>
{	
	private String brand;
	private double price;
	public Pen(int price,String brand) 
	{
		 this.price=price;
		 this.brand=brand;
	}
	public String toString()
	{
		return "Brand=" + brand + ", Price=" + price +"\n";
	}
	public double getPrice() 
	{
		return price;
	}
	public void setPrice(double price) 
	{
		this.price = price;
	}
	public String getBrand() 
	{
		return brand;
	}
	public void setBrand(String brand) {
		this.brand = brand;
	}
	@Override
	public int compareTo(Pen o) {
		// TODO Auto-generated method stub
		//if(this.price>o.price)
			//return 1;
		//else if(this.price==o.price)
			//return 0;
		//else return -1;
		return this.brand.compareTo(o.brand);
	}
	 
}
public class a
{	public static void main(String[] args) 
	{
		Pen a=new Pen(2000,"Parker");
		Pen b=new Pen(2009,"Hero");
		Pen c=new Pen(1999,"Trimax");
		List<Pen> x=new ArrayList<Pen>();
		x.add(a);
		x.add(b);
		x.add(c);
		Collections.sort(x,new BrandComparator());//use brand comparator to sort using brands and price using price comparator.
		System.out.println(x);
   }
}

*/
//read and display contents of a file.
/*
	public static void main(String[] args) throws Exception
    {
		FileReader fr = new FileReader("test.txt");
		int i;
		while ((i = fr.read()) != -1)
		{
			System.out.print((char)i);
	    }
	}
*/
//Create a file and write contents to file
/*public static void main(String[] args)
{
	try 
	{
      File myObj = new File("filename.txt");
      if (myObj.createNewFile())
	  {
		  System.out.println("File created: " + myObj.getName());
		  FileWriter myWriter = new FileWriter("filename.txt");
	      myWriter.write("Files in Java might be tricky, but it is fun enough!");
	      myWriter.close();
	      System.out.println("Successfully wrote to the file.");
	  } 
	  else
	  {
        System.out.println("File already exists.");
		FileWriter myWriter = new FileWriter("filename.txt");
      	myWriter.write("Files in Java might be tricky, but it is fun enough!");
      	myWriter.close();
      	System.out.println("Successfully wrote to the file.");
      }
    } 
	catch (IOException e)
	{
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
}*/

//Inheritance example
/*class Animal {

  // field and method of the parent class
  String name;
  public void eat() {
    System.out.println("I can eat");
  }
}

// inherit from Animal
class Dog extends Animal {

  // new method in subclass
  public void display() {
    System.out.println("My name is " + name);
  }
}

class Main 
{
  public static void main(String[] args) 
  {

    // create an object of the subclass
    Dog labrador = new Dog();

    // access field of superclass
    labrador.name = "Rohu";
    labrador.display();

    // call method of superclass
    // using object of subclass
    labrador.eat();

  }
}*/
//encapsulation example
/*class Area {

  // fields to calculate area
  int length;
  int breadth;

  // constructor to initialize values
  Area(int length, int breadth) {
    this.length = length;
    this.breadth = breadth;
  }

  // method to calculate area
  public void getArea() {
    int area = length * breadth;
    System.out.println("Area: " + area);
  }
}

class Main {
  public static void main(String[] args) {

    // create object of Area
    // pass value of length and breadth
    Area rectangle = new Area(5, 6);
    rectangle.getArea();
  }
}

//Polymorphism in java
/*class Language {
  public void displayInfo() {
    System.out.println("Common English Language");
  }
}

class Java extends Language {
  @Override
  public void displayInfo() {
    System.out.println("Java Programming Language");
  }
}

class Main {
  public static void main(String[] args) {

    // create an object of Java class
    Java j1 = new Java();
    j1.displayInfo();

    // create an object of Language class
    Language l1 = new Language();
    l1.displayInfo();
  }
}*/

//abstraction demo
/*
abstract class Animal
{
  public abstract void animalSound();
  public void sleep()
  {
    System.out.println("Zzz");
  }
}
class Pig extends Animal {
  public void animalSound() {
    // The body of animalSound() is provided here
    System.out.println("The pig says: wee wee");
  }
}

class Main {
  public static void main(String[] args) {
    Pig myPig = new Pig(); // Create a Pig object
    myPig.animalSound();
    myPig.sleep();
  }
}*/

//SBI,HDFC,ICICI - overriding
/*class Bank
{  
int getRateOfInterest(){return 0;}  
}  
class SBI extends Bank
{  
int getRateOfInterest(){return 8;}  
}  
  
class ICICI extends Bank{  
int getRateOfInterest(){return 7;}  
}  
class AXIS extends Bank{  
int getRateOfInterest(){return 9;}  
}  
//Test class to create objects and call the methods  
class Test2{  
public static void main(String args[]){  
SBI s=new SBI();  
ICICI i=new ICICI();  
AXIS a=new AXIS();  
System.out.println("SBI Rate of Interest: "+s.getRateOfInterest());  
System.out.println("ICICI Rate of Interest: "+i.getRateOfInterest());  
System.out.println("AXIS Rate of Interest: "+a.getRateOfInterest());  
}  
}*/
//Negative exception
/*import java.io.*;
class MyException extends Exception
{
 public MyException(String str)
 {
  System.out.println(str);
 }
}

public class SignException
{public static void main(String[] args)throws IOException
{
  BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
  System.out.print("Input number :: ");
  
  try {
   int num = Integer.parseInt(br.readLine());
   if(num < 0)
    throw new MyException("Number is negative");
   else
    throw new MyException("Number is positive");
  }
  catch (MyException m) {
   System.out.println(m);
  }
 }*/
 
//thraed sleep exception
/*public class SleepExp1 extends Thread  
{    
    public void run()  
    {    
        for(int i=1;i<5;i++)  
        {    
            try  
            {  
                Thread.sleep(500);  
            }catch(InterruptedException e){System.out.println(e);}    
            System.out.println(i);    
        }    
    }    
    public static void main(String args[])  
    {    
        SleepExp1 t1=new SleepExp1();    
        SleepExp1 t2=new SleepExp1();    
        t1.start();    
        t2.start();    
    }    
}*/

//wrapper class to convert one type to another
/*class a
{
	float bz;
	int cz;
	double dz;
	void input(String x)
	{
		float b=Float.parseFloat(x);
		int c=Integer.parseInt(x);
		double d=Double.parseDouble(x);
		bz=b;
		cz=c;
		dz=d;
	}
	void disp()
	{
		System.out.println("Float:"+bz);
		System.out.println("Integer:"+cz);
		System.out.println("Double:"+dz);
		
	}
}
class b
{
	public static void main(String[] args)
	{
	a e=new a();
	e.input("30");
	e.disp();
	}
}